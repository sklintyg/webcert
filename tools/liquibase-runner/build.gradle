apply plugin: 'application'

mainClassName = "liquibase.integration.commandline.LiquibaseCommandLine"
applicationDefaultJvmArgs = ["-Dfile.encoding=utf8", "-Dliquibase.headless=true"]

startScripts {
    doLast {
        def persistenceDependency = configurations.runtimeOnly.filter { it.name.startsWith("webcert-persistence") }.singleFile.name

        def originalScript = unixScript.text
        unixScript.text = unixScript.text.replaceAll(/\s\s"\$@"\n/, '  --driver=com.mysql.cj.jdbc.Driver --classpath=lib/'
                + persistenceDependency + ' --changeLogFile=changelog/changelog.xml --logLevel=info "\\$@"')
        if (originalScript == unixScript.text) {
            throw new RuntimeException("No replacement seems to have been made to the liquibase script.")
        }

        def originalWindowsScript = windowsScript.text
        windowsScript.text = windowsScript.text.replaceAll(/\.LiquibaseCommandLine/, ".LiquibaseCommandLine "
                + "--driver=com.mysql.cj.jdbc.Driver --classpath=lib/${persistenceDependency} --changeLogFile=changelog/changelog.xml "
                + "--logLevel=info")
        if (originalWindowsScript == windowsScript.text) {
            throw new RuntimeException("No replacement seems to have been made to the windows liquibase script.")
        }
    }
}

artifacts { archives distZip }
sonar { skipProject = true }

configurations.runtimeOnly {
    setCanBeResolved(true)
    transitive = false
}

def liquibaseVersion = dependencyManagement.managedVersions['org.liquibase:liquibase-core']

dependencies {
    implementation "info.picocli:picocli:${picocliVersion}"
    runtimeOnly "com.mysql:mysql-connector-j"
    runtimeOnly "org.liquibase:liquibase-core"
    runtimeOnly "org.liquibase.ext:liquibase-hibernate6:" + liquibaseVersion
    runtimeOnly project(':webcert-persistence')
}
