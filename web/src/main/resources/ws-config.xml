<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (C) 2016 Inera AB (http://www.inera.se)
  ~
  ~ This file is part of sklintyg (https://github.com/sklintyg).
  ~
  ~ sklintyg is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License as published by
  ~ the Free Software Foundation, either version 3 of the License, or
  ~ (at your option) any later version.
  ~
  ~ sklintyg is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  ~ GNU General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with this program.  If not, see <http://www.gnu.org/licenses/>.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:sec="http://cxf.apache.org/configuration/security"
    xmlns:jaxws="http://cxf.apache.org/jaxws" xmlns:http="http://cxf.apache.org/transports/http/configuration"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://cxf.apache.org/transports/http/configuration http://cxf.apache.org/schemas/configuration/http-conf.xsd
        http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
        http://cxf.apache.org/configuration/security http://cxf.apache.org/schemas/configuration/security.xsd">

  <!-- Clients using NTJP -->
  <beans>
    <jaxws:client id="sendQuestionToFKClient"
        serviceClass="se.inera.ifv.insuranceprocess.healthreporting.sendmedicalcertificatequestion.rivtabp20.v1.SendMedicalCertificateQuestionResponderInterface"
        address="${sendquestiontofk.endpoint.url}"/>

    <jaxws:client id="sendAnswerToFKClient"
        serviceClass="se.inera.ifv.insuranceprocess.healthreporting.sendmedicalcertificateanswer.rivtabp20.v1.SendMedicalCertificateAnswerResponderInterface"
        address="${sendanswertofk.endpoint.url}"/>

    <jaxws:client id="listCertificatesForCareResponderV3"
        serviceClass="se.riv.clinicalprocess.healthcond.certificate.listcertificatesforcare.v3.ListCertificatesForCareResponderInterface"
        address="${intygstjanst.listcertificatesforcare.v3.endpoint.url}"/>

    <jaxws:client id="sendCertificateClient"
        serviceClass="se.riv.clinicalprocess.healthcond.certificate.sendCertificateToRecipient.v2.SendCertificateToRecipientResponderInterface"
        address="${intygstjanst.sendcertificate.endpoint.url}"/>

    <jaxws:client id="revokeCertificateClient"
        serviceClass="se.inera.ifv.insuranceprocess.healthreporting.revokemedicalcertificate.rivtabp20.v1.RevokeMedicalCertificateResponderInterface"
        address="${intygstjanst.revokecertificate.endpoint.url}"/>

    <jaxws:client id="revokeCertificateClientRivta"
        serviceClass="se.riv.clinicalprocess.healthcond.certificate.revokeCertificate.v2.RevokeCertificateResponderInterface"
        address="${intygstjanst.revokecertificaterivta.endpoint.url}"/>

    <jaxws:client id="sendMessageToRecipientClient"
        serviceClass="se.riv.clinicalprocess.healthcond.certificate.sendMessageToRecipient.v2.SendMessageToRecipientResponderInterface"
        address="${intygstjanst.sendmessagetorecipient.endpoint.url}"/>

    <jaxws:client id="pingPrivatlakarportalForConfigurationClient"
        serviceClass="se.riv.itintegration.monitoring.rivtabp21.v1.PingForConfigurationResponderInterface"
        address="${privatepractitioner.pingforconfiguration.endpoint.url}"/>

    <jaxws:client id="grpServicePortTypeClient"
        serviceClass="se.funktionstjanster.grp.v1.GrpServicePortType"
        address="${cgi.funktionstjanster.grp.url}"/>

    <jaxws:client id="registerCertificateClient"
        serviceClass="se.riv.clinicalprocess.healthcond.certificate.registerCertificate.v3.RegisterCertificateResponderInterface"
        address="${intygstjanst.registercertificate.v3.endpoint.url}">
    </jaxws:client>

    <jaxws:client id="getCertificateClient"
        serviceClass="se.riv.clinicalprocess.healthcond.certificate.getCertificate.v2.GetCertificateResponderInterface"
        address="${intygstjanst.getcertificate.endpoint.url}">
    </jaxws:client>

    <jaxws:client id="ListActiveSickLeavesForCareUnitClient"
        serviceClass="se.inera.intyg.clinicalprocess.healthcond.rehabilitation.listactivesickleavesforcareunit.v1.ListActiveSickLeavesForCareUnitResponderInterface"
        address="${intygstjanst.listactivesickleavesforcareunit.v1.endpoint.url}">
    </jaxws:client>

  </beans>

  <!-- Clients NOT using NTJP -->
  <beans>
    <jaxws:client id="getCertificateTypeInfoClient"
        serviceClass="se.inera.intyg.clinicalprocess.healthcond.certificate.getcertificatetypeinfo.v1.GetCertificateTypeInfoResponderInterface"
        address="${intygstjanst.getcertificatetypeinfo.endpoint.url}">
    </jaxws:client>

    <jaxws:client id="listRelationsForCertificateClient" serviceClass="se.inera.intyg.clinicalprocess.healthcond.certificate.listrelationsforcertificate.v1.ListRelationsForCertificateResponderInterface"
        address="${intygstjanst.listrelationsforcertificate.endpoint.url}">
    </jaxws:client>

    <!-- Vårdens intyg -->
    <jaxws:client id="listApprovedReceiversClient" serviceClass="se.inera.intyg.clinicalprocess.healthcond.certificate.listapprovedreceivers.v1.ListApprovedReceiversResponderInterface"
                  address="${intygstjanst.listapprovedreceivers.endpoint.url}">
    </jaxws:client>

    <jaxws:client id="listPossibleReceiversClient" serviceClass="se.inera.intyg.clinicalprocess.healthcond.certificate.listpossiblereceivers.v1.ListPossibleReceiversResponderInterface"
                  address="${intygstjanst.listpossiblereceivers.endpoint.url}">
    </jaxws:client>

    <jaxws:client id="registerApprovedReceiversClient" serviceClass="se.inera.intyg.clinicalprocess.healthcond.certificate.registerapprovedreceivers.v1.RegisterApprovedReceiversResponderInterface"
                  address="${intygstjanst.registerapprovedreceivers.endpoint.url}">
    </jaxws:client>
    <!-- Slut vårdens intyg -->
  </beans>



  <beans profile="!dev,wc-security-test">
    <!-- GRP API conduit (signering av utkast när inloggad med BanKID-varianterna) -->
    <http:conduit
        name="\{http://funktionstjanster.se/grp/service/v1.0.0/.*.http-conduit">
      <http:client AllowChunking="false" AutoRedirect="true"
          Connection="Keep-Alive"/>

      <http:tlsClientParameters disableCNCheck="true">
        <sec:keyManagers keyPassword="${cgi.grp.ws.key.manager.password}">
          <sec:keyStore file="${cgi.grp.ws.certificate.file}"
              password="${cgi.grp.ws.certificate.password}" type="${cgi.grp.ws.certificate.type}"/>
        </sec:keyManagers>
        <sec:trustManagers>
          <sec:keyStore file="${cgi.grp.ws.truststore.file}"
              password="${cgi.grp.ws.truststore.password}" type="${cgi.grp.ws.truststore.type}"/>
        </sec:trustManagers>

        <sec:cipherSuitesFilter>
          <!-- these filters ensure that a cipher suite with export-suitable
            or null encryption is used, but exclude anonymous Diffie-Hellman key change
            as this is vulnerable to man-in-the-middle attacks -->
          <sec:include>.*_EXPORT_.*</sec:include>
          <sec:include>.*_EXPORT1024_.*</sec:include>
          <sec:include>.*_WITH_DES_.*</sec:include>
          <sec:include>.*_WITH_AES_.*</sec:include>
          <sec:include>.*_WITH_NULL_.*</sec:include>
          <sec:exclude>.*_DH_anon_.*</sec:exclude>
        </sec:cipherSuitesFilter>
      </http:tlsClientParameters>
    </http:conduit>
  </beans>

  <beans profile="!dev">
    <http:conduit
        name="\{urn:riv:(clinicalprocess:healthcond|insuranceprocess:healthreporting|itintegration:monitoring):.*.http-conduit">
      <http:client AllowChunking="false" AutoRedirect="true"
          Connection="Keep-Alive"/>
      <http:tlsClientParameters disableCNCheck="true">
        <sec:keyManagers keyPassword="${ntjp.ws.key.manager.password}">
          <sec:keyStore file="${ntjp.ws.certificate.file}"
              password="${ntjp.ws.certificate.password}" type="${ntjp.ws.certificate.type}"/>
        </sec:keyManagers>
        <sec:trustManagers>
          <sec:keyStore file="${ntjp.ws.truststore.file}"
              password="${ntjp.ws.truststore.password}" type="${ntjp.ws.truststore.type}"/>
        </sec:trustManagers>

        <sec:cipherSuitesFilter>
          <!-- these filters ensure that a cipher suite with export-suitable
            or null encryption is used, but exclude anonymous Diffie-Hellman key change
            as this is vulnerable to man-in-the-middle attacks -->
          <sec:include>.*_EXPORT_.*</sec:include>
          <sec:include>.*_EXPORT1024_.*</sec:include>
          <sec:include>.*_WITH_DES_.*</sec:include>
          <sec:include>.*_WITH_AES_.*</sec:include>
          <sec:include>.*_WITH_NULL_.*</sec:include>
          <sec:exclude>.*_DH_anon_.*</sec:exclude>
        </sec:cipherSuitesFilter>
      </http:tlsClientParameters>
    </http:conduit>
  </beans>
</beans>
