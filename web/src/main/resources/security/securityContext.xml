<?xml version="1.0" encoding="UTF-8" ?>
<!--
  ~ Copyright (C) 2016 Inera AB (http://www.inera.se)
  ~
  ~ This file is part of sklintyg (https://github.com/sklintyg).
  ~
  ~ sklintyg is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License as published by
  ~ the Free Software Foundation, either version 3 of the License, or
  ~ (at your option) any later version.
  ~
  ~ sklintyg is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  ~ GNU General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with this program.  If not, see <http://www.gnu.org/licenses/>.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:security="http://www.springframework.org/schema/security"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
              http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
              http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
              http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

  <!-- Enable auto-wiring -->
  <context:annotation-config/>
  <context:component-scan base-package="org.springframework.security.saml"/>

  <!-- Unsecured pages -->
  <security:http security="none" pattern="/public/**"/>
  <security:http security="none" pattern="/bower_components/**"/>
  <security:http security="none" pattern="/vendor/**"/>
  <security:http security="none" pattern="/web/webjars/**"/>
  <security:http security="none" pattern="/web/eleglogin"/>
  <security:http security="none" pattern="/api/modules/map"/>
  <security:http security="none" pattern="/api/modules/active"/>
  <security:http security="none" pattern="/api/config/**"/>
  <security:http security="none" pattern="/api/configuration/**"/>
  <security:http security="none" pattern="/api/log/**"/>
  <!-- Everything under /app such as js, css, images etc is ok to access at any time -->
  <security:http security="none" pattern="/app/**"/>
  <security:http security="none" pattern="/img/**"/>
  <security:http security="none" pattern="/fonts/**"/>

  <security:http security="none" pattern="/"/>
  <security:http security="none" pattern="/boot-app.jsp"/>
  <security:http security="none" pattern="/version.jsp"/>
  <security:http security="none" pattern="/empty.html"/>
  <security:http security="none" pattern="/error.jsp"/>
  <security:http security="none" pattern="/new-error.jsp"/>
  <security:http security="none" pattern="/saml/web/**"/>
  <security:http security="none" pattern="/saml2/web/**"/>
  <security:http security="none" pattern="/services/**"/>
  <security:http security="none" pattern="/monitoring/**"/>
  <security:http security="none" pattern="/internalapi/**"/>
  <security:http security="none" pattern="/idpcheck.html"/>
  <security:http security="none" create-session="never" pattern="/metrics"/>

  <security:http security="none" pattern="/favicon.ico"/>

  <!-- Signing Service -->
  <security:http security="none" create-session="never" pattern="/api/signature/signservice/v1/metadata"/>

  <bean class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration">
    <property name="redisNamespace" value="${app.name}"/>
    <property name="redisFlushMode" value="IMMEDIATE" />
  </bean>

  <!-- Logger for SAML messages and events -->
  <bean id="samlLogger" class="se.inera.intyg.webcert.web.auth.SAMLStatusLogger">
    <property name="logMessages" value="true"/>
    <property name="logErrors" value="true"/>
  </bean>

  <!-- Real logins should use the unified user details service facade -->
  <bean id="unifiedUserDetailsService" class="se.inera.intyg.webcert.web.auth.common.UnifiedUserDetailsService"/>

  <!-- These two should only be accessed directly by fake login authentication providers -->
  <bean id="webcertUserDetailsService" class="se.inera.intyg.webcert.web.auth.WebcertUserDetailsService"/>
  <bean id="elegWebCertUserDetailsService" class="se.inera.intyg.webcert.web.auth.eleg.ElegWebCertUserDetailsService"/>
  <bean id="elegAuthenticationAttributeHelper" class="se.inera.intyg.webcert.web.auth.eleg.ElegAuthenticationAttributeHelperImpl"/>
  <bean id="elegAuthenticationMethodResolver" class="se.inera.intyg.webcert.web.auth.eleg.ElegAuthenticationMethodResolverImpl"/>

  <!-- Initialization of OpenSAML library-->
  <bean class="org.springframework.security.saml.SAMLBootstrap"/>

  <!-- Initialization of the velocity engine -->
  <bean id="velocityEngine" class="org.springframework.security.saml.util.VelocityFactory" factory-method="getEngine"/>

  <!-- XML parser pool needed for OpenSAML parsing -->
  <bean id="parserPool" class="org.opensaml.xml.parse.StaticBasicParserPool" scope="singleton"
      init-method="initialize"/>
  <bean id="parserPoolHolder" class="org.springframework.security.saml.parser.ParserPoolHolder" scope="singleton"/>

  <bean id="failureHandler" class="se.inera.intyg.webcert.web.auth.WebcertAuthenticationFailureHandler" />

  <bean id="accessDeniedHandler" class="org.springframework.security.web.access.AccessDeniedHandlerImpl">
    <property name="errorPage" value="/error.jsp?reason=denied"/>
  </bean>

  <bean id="http403ForbiddenEntryPoint" class="org.springframework.security.web.authentication.Http403ForbiddenEntryPoint"/>

  <!-- SessionRegistry is needed for keeping track of authenticated sessions (i.e users), this impl performs audit logging of login and logouts. -->
  <bean id="loggingSessionRegistry" class="se.inera.intyg.webcert.web.auth.WebcertLoggingSessionRegistryImpl"/>

  <!-- Session authentication strategy that registers authenticated sessions with the session registry -->
  <bean id="registerSessionAuthenticationStrategy" class="org.springframework.security.web.authentication.session.RegisterSessionAuthenticationStrategy">
    <constructor-arg ref="loggingSessionRegistry"/>
  </bean>

  <!-- Custom xFrameOptionsHeaderWriter that conditionally will skip adding headers so that content may be loaded in an iframe  -->
  <bean id="xFrameOptionsHeaderWriter" class="org.springframework.security.web.header.writers.DelegatingRequestMatcherHeaderWriter">
    <constructor-arg>
      <bean class="org.springframework.security.web.util.matcher.AnyRequestMatcher"/>
    </constructor-arg>
    <constructor-arg>
      <bean class="se.inera.intyg.webcert.web.auth.CustomXFrameOptionsHeaderWriter"/>
    </constructor-arg>
  </bean>

  <!--
       CookieCsrfTokenRepo saves CSRF-tokens in client-side cookies. The CSRF-token is read from the cookie by angularjs
       and put into the http header. Spring security then checks that the CSRF-tokens in the cookie and http header match.
       No CSRF-token is saved backend, this is fine since client's cookies are protected by same origin policy.

  <bean id="tokenRepository"
    class="org.springframework.security.web.csrf.CookieCsrfTokenRepository"
    p:cookieHttpOnly="false" />
     -->

  <!-- =============================================================== -->
  <!-- Unsecured pages when not in production                          -->
  <!-- =============================================================== -->
  <beans profile="!prod">
    <security:http security="none" pattern="/pubapp/**"/>
  </beans>

  <!-- =============================================================== -->
  <!-- These URLs are unsecured in all profiles except wc-security-prod -->
  <!-- =============================================================== -->
  <beans profile="dev,wc-security-dev,wc-security-test">
    <security:http security="none" pattern="/welcome.html"/>

    <!--
      This enables access to the stubs of log-sender and notification-sender
      if they are co-deployed with Webcert as the root application
    -->
    <security:http security="none" pattern="/log-sender/**"/>
    <security:http security="none" pattern="/notification-sender/**"/>
  </beans>

  <!-- =============================================================== -->
  <!-- These URLs are used for testing                                 -->
  <!-- =============================================================== -->
  <beans profile="dev,testability-api">
    <security:http security="none" pattern="/testability/fmb/**"/>
    <security:http security="none" pattern="/testability/integreradevardenheter/**"/>
    <security:http security="none" pattern="/testability/intyg/**"/>
    <security:http security="none" pattern="/testability/logMessages/**"/>
    <security:http security="none" pattern="/testability/fragasvar/**"/>
    <security:http security="none" pattern="/testability/anvandare/**"/>
    <security:http security="none" pattern="/testability/arendetest/**"/>
    <security:http security="none" pattern="/testability/utkast/**"/>
    <security:http security="none" pattern="/testability/certificate/**"/>
    <security:http security="none" pattern="/testability/config/**"/>

    <!--
      This enable access to the HSA service stub
    -->
    <security:http security="none" pattern="/api/hsa-api/**"/>
  </beans>

  <!-- =============================================================== -->
  <!-- The dev and wc-security-dev profiles only supports Fake login   -->
  <!-- Note that running with wc-security-test automatically disables  -->
  <!-- these profiles due to conflicting /** intercept patterns if     -->
  <!-- both dev and wc-security-test are active.                       -->
  <!-- =============================================================== -->
  <beans profile="!wc-security-test">
    <beans profile="dev,wc-security-dev">

      <!--
      <bean id="corsSource" class="org.springframework.web.cors.UrlBasedCorsConfigurationSource">
        <property name="corsConfigurations">
          <util:map>
            <entry key="/oauth/token">
              <bean class="org.springframework.web.cors.CorsConfiguration">
                <property name="allowCredentials" value="true" />
                <property name="allowedHeaders">
                  <list>
                    <value>Authorization</value>
                    <value>Content-Type</value>
                  </list>
                </property>
                <property name="allowedMethods">
                  <list>
                    <value>POST</value>
                    <value>GET</value>
                    <value>PUT</value>
                    <value>DELETE</value>
                  </list>
                </property>
                <property name="allowedOrigins" value="192.168.1.10" />
                <property name="exposedHeaders">
                  <list>
                    <value>Location</value>
                    <value>Set-Cookie</value>
                    <value>Content-Disposition</value>
                  </list>
                </property>
                <property name="maxAge" value="86400" />
              </bean>
            </entry>
          </util:map>
        </property>
      </bean>
      -->

      <security:http use-expressions="false" entry-point-ref="http403ForbiddenEntryPoint">
        <security:csrf disabled="true"/>
        <security:logout logout-url="/logout" logout-success-url="/welcome.html" invalidate-session="true"/>
        <security:intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY"/>
        <security:custom-filter position="PRE_AUTH_FILTER" ref="fakeAuthFilter"/>
        <security:session-management session-authentication-strategy-ref="registerSessionAuthenticationStrategy"/>

        <security:headers>
          <security:frame-options disabled="true"/>
          <security:header ref="xFrameOptionsHeaderWriter"/>
        </security:headers>
      </security:http>

      <security:authentication-manager alias="authenticationManager">
        <security:authentication-provider ref="fakeElegAuthenticationProvider"/>
        <security:authentication-provider ref="jwtAuthenticationProvider" />
        <security:authentication-provider ref="commonFakeAuthenticationProvider"/>
      </security:authentication-manager>
    </beans>
  </beans>

  <!-- ======================================================================== -->
  <!-- JWT based OAuth authentication, for test and prod -->
  <!-- ======================================================================== -->
  <beans profile="prod,wc-security-prod,wc-security-test">
    <security:http use-expressions="false" entry-point-ref="http403ForbiddenEntryPoint" pattern="(\/oauth\/token\/.*)" request-matcher="regex">
      <security:csrf disabled="true"/>
      <security:logout logout-url="/logout" logout-success-url="/" invalidate-session="true"/>
      <security:intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY"/>
      <security:custom-filter position="PRE_AUTH_FILTER" ref="jwtAuthFilter"/>
      <security:request-cache ref="redisSavedRequestCache"/>
      <security:session-management session-authentication-strategy-ref="registerSessionAuthenticationStrategy"/>
      <security:headers>
        <security:frame-options disabled="true"/>
        <security:header ref="xFrameOptionsHeaderWriter"/>
      </security:headers>
    </security:http>
  </beans>

  <!-- ======================================================================== -->
  <!-- The wc-security-test profile support both Säkerhetstjänst and Fake login -->
  <!-- ======================================================================== -->
  <beans profile="wc-security-test">
    <!-- /visa/intyg/ and /webcert/web are deep-integration links used by VAS and Cosmic and should use SAML SSO -->
    <security:http use-expressions="false" request-matcher="regex" pattern="(\/fake)|(\/welcome.html)|(\/saml\/.*)|(\/visa\/intyg\/.*)|(\/v2\/visa\/intyg\/.*)|(\/webcert\/web\/.*)|(\/web\/maillink\/.*)" entry-point-ref="samlEntryPoint">
      <security:csrf disabled="true"/>
      <security:logout logout-url="/logout" logout-success-url="/welcome.html" invalidate-session="true"/>
      <security:intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY"/>
      <!-- <security:custom-filter before="PRE_AUTH_FILTER" ref="createCsrfTokenFilter"/> -->
      <security:custom-filter position="PRE_AUTH_FILTER" ref="fakeAuthFilter"/>
      <security:custom-filter after="BASIC_AUTH_FILTER" ref="samlFilter"/>
      <security:request-cache ref="redisSavedRequestCache"/>
      <security:session-management session-authentication-strategy-ref="registerSessionAuthenticationStrategy"/>
      <security:headers>
        <security:frame-options disabled="true"/>
        <security:header ref="xFrameOptionsHeaderWriter"/>
      </security:headers>
    </security:http>

    <security:http use-expressions="false" entry-point-ref="http403ForbiddenEntryPoint">
      <security:csrf disabled="true"/>
     <!-- <security:csrf token-repository-ref="tokenRepository" disabled="true"/> -->
      <security:logout logout-url="/logout" logout-success-url="/welcome.html" invalidate-session="true"/>
      <security:intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY"/>
      <security:custom-filter position="PRE_AUTH_FILTER" ref="fakeAuthFilter"/>
      <security:custom-filter after="BASIC_AUTH_FILTER" ref="samlFilter"/>
      <security:request-cache ref="redisSavedRequestCache"/>
      <security:session-management session-authentication-strategy-ref="registerSessionAuthenticationStrategy"/>
      <security:headers>
        <security:frame-options disabled="true"/>
        <security:header ref="xFrameOptionsHeaderWriter"/>
      </security:headers>
    </security:http>

    <security:authentication-manager alias="authenticationManager">
      <security:authentication-provider ref="samlAuthenticationProvider"/>
      <security:authentication-provider ref="jwtAuthenticationProvider" />
      <security:authentication-provider ref="fakeElegAuthenticationProvider"/>
      <security:authentication-provider ref="commonFakeAuthenticationProvider"/>
    </security:authentication-manager>
  </beans>

  <!-- =============================================================== -->
  <!-- The wc-security-prod profile only supports Säkerhetstjänst and CGI e-leg login -->
  <!-- =============================================================== -->
  <beans profile="prod,wc-security-prod">
    <!-- /swagger-ui och /pubapp/simulator ska vara nedstängda i produktion -->
    <security:http entry-point-ref="http403ForbiddenEntryPoint" pattern="(\/swagger-ui\/.*)|(\/pubapp\/simulator\/.*)|(\/pubapp\/apis\/.*)|(\/pubapp\/signapp\/.*)" request-matcher="regex">
      <security:access-denied-handler ref="accessDeniedHandler"/>
      <security:intercept-url pattern="/**" access="denyAll"/>
    </security:http>

    <!-- /visa/intyg/ and /webcert/web are deep-integration links used by VAS and Cosmic and should use SAML SSO -->
    <security:http use-expressions="false" entry-point-ref="samlEntryPoint" pattern="(\/saml\/.*)|(\/visa\/intyg\/.*)|(\/v2\/visa\/intyg\/.*)|(\/webcert\/web\/.*)|(\/web\/maillink\/.*)" request-matcher="regex">
      <security:csrf disabled="true"/>
      <security:intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY"/>
     <!-- <security:custom-filter before="PRE_AUTH_FILTER" ref="createCsrfTokenFilter"/> -->
      <security:custom-filter after="BASIC_AUTH_FILTER" ref="samlFilter"/>
      <security:request-cache ref="redisSavedRequestCache"/>
      <security:session-management session-authentication-strategy-ref="registerSessionAuthenticationStrategy"/>
      <security:headers>
        <security:frame-options disabled="true"/>
        <security:header ref="xFrameOptionsHeaderWriter"/>
      </security:headers>
    </security:http>

    <security:http use-expressions="false" entry-point-ref="http403ForbiddenEntryPoint">
      <security:csrf disabled="true"/>
      <!-- <security:csrf token-repository-ref="tokenRepository" disabled="false"/> -->
      <security:intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY"/>
      <security:custom-filter after="BASIC_AUTH_FILTER" ref="samlFilter"/>
      <security:request-cache ref="redisSavedRequestCache"/>
      <security:session-management session-authentication-strategy-ref="registerSessionAuthenticationStrategy"/>
      <security:headers>
        <security:frame-options disabled="true"/>
        <security:header ref="xFrameOptionsHeaderWriter"/>
      </security:headers>
    </security:http>

    <security:authentication-manager alias="authenticationManager">
      <security:authentication-provider ref="samlAuthenticationProvider"/>
      <security:authentication-provider ref="jwtAuthenticationProvider" />
    </security:authentication-manager>
  </beans>

  <beans profile="dev,wc-security-dev,wc-security-test">
    <bean id="fakeAuthFilter" class="se.inera.intyg.webcert.web.auth.fake.FakeAuthenticationFilter">
      <property name="authenticationManager" ref="authenticationManager"/>
      <property name="sessionAuthenticationStrategy" ref="registerSessionAuthenticationStrategy"/>
      <property name="authenticationSuccessHandler" ref="fakeSuccessHandler"/>
      <property name="authenticationFailureHandler" ref="failureHandler"/>
    </bean>
    <bean id="fakeSuccessHandler"
        class="org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler">
      <property name="defaultTargetUrl" value="/"/>
    </bean>

    <bean id="commonFakeAuthenticationProvider"
        class="se.inera.intyg.webcert.web.auth.fake.common.CommonFakeAuthenticationProvider">
      <property name="userDetails" ref="webcertUserDetailsService"/>
    </bean>
    <bean id="fakeElegAuthenticationProvider"
        class="se.inera.intyg.webcert.web.auth.eleg.FakeElegAuthenticationProvider">
      <property name="elegWebCertUserDetailsService" ref="elegWebCertUserDetailsService"/>
    </bean>
    <bean id="jwtAuthFilter" class="se.inera.intyg.webcert.web.auth.oidc.jwt.FakeJwtAuthenticationFilter">
      <constructor-arg index="0" ref="saveRequestMatcher" />
      <property name="authenticationManager" ref="authenticationManager"/>
      <property name="sessionAuthenticationStrategy" ref="registerSessionAuthenticationStrategy"/>
      <property name="authenticationSuccessHandler" ref="jwtSuccessHandler"/>
      <property name="authenticationFailureHandler" ref="failureHandler"/>
    </bean>
  </beans>

  <beans profile="prod,wc-security-prod">
    <bean id="jwtAuthFilter" class="se.inera.intyg.webcert.web.auth.oidc.jwt.JwtAuthenticationFilter">
      <constructor-arg index="0" ref="saveRequestMatcher" />
      <property name="authenticationManager" ref="authenticationManager"/>
      <property name="sessionAuthenticationStrategy" ref="registerSessionAuthenticationStrategy"/>
      <property name="authenticationSuccessHandler" ref="jwtSuccessHandler"/>
      <property name="authenticationFailureHandler" ref="failureHandler"/>
    </bean>
  </beans>

  <beans>
    <bean id="jwtSuccessHandler"
          class="se.inera.intyg.webcert.web.auth.oidc.jwt.JwtAuthenticationSuccessHandler">
    </bean>
    <bean id="jwtAuthenticationProvider" class="se.inera.intyg.webcert.web.auth.oidc.jwt.JwtAuthenticationProvider">
      <property name="webcertUserDetailsService" ref="webcertUserDetailsService" />
    </bean>

    <!-- Decide which requests should be saved for redirection after successful login.
         Triggers on: /web/* and integration links /visa/* and /webcert/*
         We don't want to save /api and /moduleapi requests since this will make the browser display the data.
         Second constructor argument is set to null to match all HTTP methods.
    -->
    <bean id="saveRequestMatcher" class="org.springframework.security.web.util.matcher.RegexRequestMatcher">
      <constructor-arg index="0" value="\/web\/.*|\/visa\/.*|\/v2\/visa\/.*|\/webcert\/.*|\/oauth/token\/.*"/>
      <constructor-arg index="1"><null/></constructor-arg>
    </bean>

    <!-- Home-brewn SavedRequestCache storing saved requests in Redis -->
    <bean id="redisSavedRequestCache" class="se.inera.intyg.webcert.web.auth.RedisSavedRequestCache">
      <property name="requestMatcher" ref="saveRequestMatcher"/>
    </bean>
  </beans>

  <beans profile="prod,wc-security-test,wc-security-prod">

   <!-- <bean id="createCsrfTokenFilter" class="se.inera.intyg.webcert.web.security.CreateCsrfTokenFilter"/> -->

    <bean id="samlFilter" class="org.springframework.security.web.FilterChainProxy">
      <security:filter-chain-map request-matcher="ant">
        <security:filter-chain pattern="/saml/login/**" filters="samlEntryPoint"/>
        <security:filter-chain pattern="/saml/logout/**" filters="samlLogoutFilter"/>
        <security:filter-chain pattern="/saml/SSO/**" filters="samlWebSSOProcessingFilter"/>
        <security:filter-chain pattern="/saml/SingleLogout/**" filters="samlLogoutProcessingFilter"/>
        <security:filter-chain pattern="/saml/metadata/**" filters="metadataDisplayFilter"/>
      </security:filter-chain-map>
    </bean>

    <!-- Handler deciding where to redirect user after successful login -->
    <bean id="successRedirectHandler"
          class="se.inera.intyg.webcert.web.auth.WebcertAuthenticationSuccessHandler">
      <property name="defaultTargetUrl" value="/"/>
      <property name="requestCache" ref="redisSavedRequestCache"/>
    </bean>

    <!-- Central storage of cryptographic keys -->
    <bean id="keyManager" class="org.springframework.security.saml.key.JKSKeyManager">
      <constructor-arg value="${sakerhetstjanst.saml.keystore.file}"/>
      <constructor-arg type="java.lang.String" value="${sakerhetstjanst.saml.keystore.password}"/>
      <constructor-arg>
        <map>
          <entry key="${sakerhetstjanst.saml.keystore.alias}" value="${sakerhetstjanst.saml.keystore.password}"/>
        </map>
      </constructor-arg>
      <constructor-arg type="java.lang.String" value="${sakerhetstjanst.saml.keystore.alias}"/>
    </bean>

    <!-- Entry point to initialize authentication, default values taken from properties file -->
    <bean id="samlEntryPoint" class="se.inera.intyg.webcert.web.auth.WebcertSAMLEntryPoint">
      <property name="defaultProfileOptions">
        <bean class="org.springframework.security.saml.websso.WebSSOProfileOptions">
          <property name="includeScoping" value="false"/>
          <property name="authnContexts">
            <list>
              <!-- Important: In the custom WebcertSAMLEntryPoint we mutate these for the authnRequests due to SSO problems -->
              <value>DUMMYVALUE</value>
            </list>
          </property>
        </bean>
      </property>
    </bean>

    <bean id="metadataDisplayFilter" class="org.springframework.security.saml.metadata.MetadataDisplayFilter"/>

    <!-- IDP Metadata configuration - paths to metadata of IDPs in circle of trust is here -->
    <bean id="metadata" class="org.springframework.security.saml.metadata.CachingMetadataManager">

      <constructor-arg>
        <list>

          <!-- START SERVICE PROVIDER BEAN FOR E-LEG -->
          <bean class="org.springframework.security.saml.metadata.ExtendedMetadataDelegate">
            <constructor-arg>
              <bean class="org.opensaml.saml2.metadata.provider.FilesystemMetadataProvider">
                <constructor-arg>
                  <value type="java.io.File">${application.dir}/config/sp-eleg.xml</value>
                </constructor-arg>
                <property name="parserPool" ref="parserPool"/>
              </bean>
            </constructor-arg>

            <constructor-arg>
              <bean class="org.springframework.security.saml.metadata.ExtendedMetadata">
                <property name="alias" value="eleg"/>
                <property name="local" value="true"/>
                <property name="securityProfile" value="metaiop"/>
                <property name="sslSecurityProfile" value="metaiop"/>    <!-- pkix -->
                <property name="signMetadata" value="true"/>

                <!-- The signingKey and encryptionKey refers to the _aliases_ of the key in the keystore defined in the keyManager bean -->
                <property name="signingKey" value="${sakerhetstjanst.saml.keystore.alias}"/>
                <property name="encryptionKey" value="${sakerhetstjanst.saml.keystore.alias}"/>
                <property name="requireArtifactResolveSigned" value="true"/>
                <property name="requireLogoutRequestSigned" value="true"/>
                <property name="requireLogoutResponseSigned" value="true"/>
              </bean>
            </constructor-arg>

            <property name="metadataTrustCheck" value="true"/>
          </bean>

          <bean class="org.springframework.security.saml.metadata.ExtendedMetadataDelegate">
            <constructor-arg>
              <bean class="org.opensaml.saml2.metadata.provider.FilesystemMetadataProvider">
                <constructor-arg>
                  <value type="java.io.File">${application.dir}/config/sp-eleg-wc2.xml</value>
                </constructor-arg>
                <property name="parserPool" ref="parserPool"/>
              </bean>
            </constructor-arg>

            <constructor-arg>
              <bean class="org.springframework.security.saml.metadata.ExtendedMetadata">
                <property name="alias" value="eleg-wc2"/>
                <property name="local" value="true"/>
                <property name="securityProfile" value="metaiop"/>
                <property name="sslSecurityProfile" value="metaiop"/>    <!-- pkix -->
                <property name="signMetadata" value="true"/>

                <!-- The signingKey and encryptionKey refers to the _aliases_ of the key in the keystore defined in the keyManager bean -->
                <property name="signingKey" value="${sakerhetstjanst.saml.keystore.alias}"/>
                <property name="encryptionKey" value="${sakerhetstjanst.saml.keystore.alias}"/>
                <property name="requireArtifactResolveSigned" value="true"/>
                <property name="requireLogoutRequestSigned" value="true"/>
                <property name="requireLogoutResponseSigned" value="true"/>
              </bean>
            </constructor-arg>

            <property name="metadataTrustCheck" value="true"/>
          </bean>
          <!-- END SERVICE PROVIDER BEAN FOR E-LEG -->

          <!-- START IDENTITY PROVIDER BEAN FOR E-LEG -->
          <bean class="org.springframework.security.saml.metadata.ExtendedMetadataDelegate">
            <constructor-arg>
              <bean class="org.opensaml.saml2.metadata.provider.FilesystemMetadataProvider">
                <constructor-arg>
                  <value type="java.io.File">${application.dir}/config/idp-eleg.xml</value>
                </constructor-arg>
                <property name="parserPool" ref="parserPool"/>
              </bean>
            </constructor-arg>
            <constructor-arg>
              <bean class="org.springframework.security.saml.metadata.ExtendedMetadata">
                <property name="alias" value="eleg"/>
              </bean>
            </constructor-arg>

            <property name="metadataTrustCheck" value="false"/>
          </bean>
          <!-- END IDENTITY PROVIDER BEAN FOR E-LEG -->

          <!-- START SERVICE PROVIDER BEAN FOR SITHS -->
          <bean class="org.springframework.security.saml.metadata.ExtendedMetadataDelegate">
            <constructor-arg>
              <bean class="org.opensaml.saml2.metadata.provider.FilesystemMetadataProvider">
                <constructor-arg>
                  <value type="java.io.File">${application.dir}/config/sp-inera.xml</value>
                </constructor-arg>
                <property name="parserPool" ref="parserPool"/>
              </bean>
            </constructor-arg>
            <property name="metadataTrustCheck" value="true"/>

            <constructor-arg>
              <bean class="org.springframework.security.saml.metadata.ExtendedMetadata">
                <property name="alias" value="defaultAlias"/>
                <property name="local" value="true"/>
                <property name="securityProfile" value="metaiop"/>
                <property name="sslSecurityProfile" value="metaiop"/>
                <property name="signMetadata" value="true"/>
                <!-- The signingKey and encryptionKey refers to the _aliases_ of the key in the keystore defined in the keyManager bean -->
                <property name="signingKey" value="${sakerhetstjanst.saml.keystore.alias}"/>
                <property name="encryptionKey" value="${sakerhetstjanst.saml.keystore.alias}"/>
                <property name="requireArtifactResolveSigned" value="true"/>
                <property name="requireLogoutRequestSigned" value="false"/>
                <property name="requireLogoutResponseSigned" value="false"/>
              </bean>
            </constructor-arg>
          </bean>

          <bean class="org.springframework.security.saml.metadata.ExtendedMetadataDelegate">
            <constructor-arg>
              <bean class="org.opensaml.saml2.metadata.provider.FilesystemMetadataProvider">
                <constructor-arg>
                  <value type="java.io.File">${application.dir}/config/sp-inera-wc2.xml</value>
                </constructor-arg>
                <property name="parserPool" ref="parserPool"/>
              </bean>
            </constructor-arg>
            <property name="metadataTrustCheck" value="true"/>

            <constructor-arg>
              <bean class="org.springframework.security.saml.metadata.ExtendedMetadata">
                <property name="alias" value="siths-wc2"/>
                <property name="local" value="true"/>
                <property name="securityProfile" value="metaiop"/>
                <property name="sslSecurityProfile" value="metaiop"/>
                <property name="signMetadata" value="true"/>
                <!-- The signingKey and encryptionKey refers to the _aliases_ of the key in the keystore defined in the keyManager bean -->
                <property name="signingKey" value="${sakerhetstjanst.saml.keystore.alias}"/>
                <property name="encryptionKey" value="${sakerhetstjanst.saml.keystore.alias}"/>
                <property name="requireArtifactResolveSigned" value="true"/>
                <property name="requireLogoutRequestSigned" value="false"/>
                <property name="requireLogoutResponseSigned" value="false"/>
              </bean>
            </constructor-arg>
          </bean>
          <!--  END SERVICE PROVIDER BEAN FOR SITHS -->

          <!-- START IDENTITY PROVIDER BEAN FOR SITHS -->
          <bean class="org.springframework.security.saml.metadata.ExtendedMetadataDelegate">
            <constructor-arg>
              <bean class="org.opensaml.saml2.metadata.provider.FilesystemMetadataProvider">
                <constructor-arg>
                  <value type="java.io.File">${application.dir}/config/idp-inera.xml</value>
                </constructor-arg>
                <property name="parserPool" ref="parserPool"/>
              </bean>
            </constructor-arg>
            <constructor-arg>
              <bean class="org.springframework.security.saml.metadata.ExtendedMetadata">
                <property name="alias" value="defaultAlias"/>
              </bean>
            </constructor-arg>

            <property name="metadataTrustCheck" value="true"/>
          </bean>
          <!-- END IDENTITY PROVIDER BEAN FOR SITHS -->
        </list>
      </constructor-arg>
      <property name="refreshCheckInterval" value="86400000"/>

      <!-- Setting SITHS as default login method to be redirected to when requesting protected resource. -->
      <!-- This value _must_ match the entityID specified in idp-inera.xml.  -->
      <property name="defaultIDP" value="${sakerhetstjanst.saml.idp.metadata.url}"/>

      <!-- This makes sure the Sakerhetstjanst SP metadata is used by default -->
      <!-- This value _must_ match the entityID specified in sp-inera.xml  -->
      <property name="hostedSPName" value="${sakerhetstjanst.saml.entityId}"/>

    </bean>

    <!-- SAML Authentication Provider responsible for validating of received SAML messages over SITHS or e-leg class="org.springframework.security.saml.SAMLAuthenticationProvider"-->
    <bean id="samlAuthenticationProvider" class="se.inera.intyg.webcert.web.auth.WebcertAuthenticationProvider">
      <property name="userDetails" ref="unifiedUserDetailsService"/>
      <property name="forcePrincipalAsString" value="false"/>
    </bean>

    <!-- Processing filter for WebSSO profile messages -->
    <bean id="samlWebSSOProcessingFilter" class="org.springframework.security.saml.SAMLProcessingFilter">
      <property name="authenticationManager" ref="authenticationManager"/>
      <property name="sessionAuthenticationStrategy" ref="registerSessionAuthenticationStrategy"/>
      <property name="authenticationSuccessHandler" ref="successRedirectHandler"/>
      <property name="authenticationFailureHandler" ref="failureHandler"/>
    </bean>

    <!-- Class loading incoming SAML messages from httpRequest stream -->
    <bean id="processor" class="org.springframework.security.saml.processor.SAMLProcessorImpl">
      <constructor-arg>
        <list>
          <ref bean="redirectBinding"/>
          <ref bean="postBinding"/>
          <ref bean="artifactBinding"/>
        </list>
      </constructor-arg>
    </bean>

    <bean id="artifactBinding" class="org.springframework.security.saml.processor.HTTPArtifactBinding">
      <constructor-arg ref="parserPool"/>
      <constructor-arg ref="velocityEngine"/>
      <constructor-arg>
        <bean class="org.springframework.security.saml.websso.ArtifactResolutionProfileImpl">
          <constructor-arg>
            <bean class="org.apache.commons.httpclient.HttpClient"/>
          </constructor-arg>
          <property name="processor">
            <bean id="soapProcessor" class="org.springframework.security.saml.processor.SAMLProcessorImpl">
              <constructor-arg ref="soapBinding"/>
            </bean>
          </property>
        </bean>
      </constructor-arg>
    </bean>

    <bean id="soapBinding" class="org.springframework.security.saml.processor.HTTPSOAP11Binding">
      <constructor-arg ref="parserPool"/>
    </bean>

    <!-- SAML 2.0 WebSSO Assertion Consumer -->
    <bean id="webSSOprofileConsumer" class="org.springframework.security.saml.websso.WebSSOProfileConsumerImpl">
      <property name="responseSkew" value="${sakerhetstjanst.saml.responseSkew}"/>
    </bean>

    <!-- SAML 2.0 Holder-of-Key WebSSO Assertion Consumer -->
    <bean id="hokWebSSOprofileConsumer" class="org.springframework.security.saml.websso.WebSSOProfileConsumerHoKImpl"/>

    <!-- SAML 2.0 Web SSO profile. Overridden by Webcert to provide AttributeConsumerIndex -->
    <bean id="webSSOprofile" class="se.inera.intyg.webcert.web.auth.WebcertWebSSOProfileImpl">
    </bean>

    <!-- SAML 2.0 Logout Profile -->
    <bean id="logoutprofile" class="org.springframework.security.saml.websso.SingleLogoutProfileImpl"/>

    <!-- Bindings, encoders and decoders used for creating and parsing messages -->
    <bean id="postBinding" class="org.springframework.security.saml.processor.HTTPPostBinding">
      <constructor-arg ref="parserPool"/>
      <constructor-arg ref="velocityEngine"/>
    </bean>

    <bean id="redirectBinding" class="org.springframework.security.saml.processor.HTTPRedirectDeflateBinding">
      <constructor-arg ref="parserPool"/>
    </bean>

    <bean id="contextProvider" class="se.inera.intyg.webcert.web.auth.WebcertSAMLContextProviderLB">
      <property name="scheme" value="https"/>
      <property name="serverName" value="${webcert.domain.name}"/>
      <property name="includeServerPortInRequestURL" value="false"/>
      <property name="contextPath" value="/"/>
      <property name="keyManager" ref="keyManager"/>
    </bean>

    <!-- Logout handler terminating local session -->
    <bean id="logoutHandler" class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler"/>

    <!-- Override default logout processing filter with the one processing SAML messages -->
    <bean id="samlLogoutFilter" class="se.inera.intyg.webcert.web.auth.WebcertSAMLLogoutFilter">
      <constructor-arg index="0" ref="successLogoutHandler"/>
      <constructor-arg index="1" ref="logoutHandler"/>
      <constructor-arg index="2" ref="logoutHandler"/>
    </bean>

    <!-- Filter processing incoming logout messages -->
    <!-- First argument determines URL user will be redirected to after successful global logout -->
    <bean id="samlLogoutProcessingFilter" class="org.springframework.security.saml.SAMLLogoutProcessingFilter">
      <constructor-arg index="0" ref="successLogoutHandler"/>
      <constructor-arg index="1" ref="logoutHandler"/>
    </bean>

    <!-- Handler for successful logout -->
    <bean id="successLogoutHandler"
        class="org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler">
      <property name="defaultTargetUrl" value="/"/>
      <property name="targetUrlParameter" value="RelayState"/>
    </bean>

  </beans>

</beans>
