<!--
  ~ Copyright (C) 2016 Inera AB (http://www.inera.se)
  ~
  ~ This file is part of sklintyg (https://github.com/sklintyg).
  ~
  ~ sklintyg is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License as published by
  ~ the Free Software Foundation, either version 3 of the License, or
  ~ (at your option) any later version.
  ~
  ~ sklintyg is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  ~ GNU General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with this program.  If not, see <http://www.gnu.org/licenses/>.
  -->

<web-app xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         version="3.0"
         metadata-complete="true">

    <display-name>Inera WebCert Web Application</display-name>

    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:webcert-config.xml</param-value>
    </context-param>

    <context-param>
        <param-name>logbackConfigParameter</param-name>
        <param-value>logback.file</param-value>
    </context-param>

    <!-- Listener for external logback configuration file -->
    <listener>
        <listener-class>se.inera.intyg.infra.monitoring.logging.LogbackConfiguratorContextListener</listener-class>
    </listener>

    <!-- Start spring context -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <listener>
        <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
    </listener>

    <!-- Handelse publisher for keeping track of when session ends and removing them from the sessionRegistry -->
    <listener>
        <listener-class>org.springframework.security.web.session.HttpSessionEventPublisher</listener-class>
    </listener>

    <!-- Spring Web -->
    <servlet>
        <servlet-name>web</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <!-- Webcert GUI REST services -->
    <servlet>
        <servlet-name>api</servlet-name>
        <servlet-class>org.apache.cxf.transport.servlet.CXFServlet</servlet-class>
        <init-param>
            <param-name>config-location</param-name>
            <param-value>/WEB-INF/api-cxf-servlet.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <!-- Webcert Module REST services -->
    <servlet>
        <servlet-name>moduleapi</servlet-name>
        <servlet-class>org.apache.cxf.transport.servlet.CXFServlet</servlet-class>
        <init-param>
            <param-name>config-location</param-name>
            <param-value>/WEB-INF/moduleapi-cxf-servlet.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet>
        <servlet-name>internalapi</servlet-name>
        <servlet-class>org.apache.cxf.transport.servlet.CXFServlet</servlet-class>
        <init-param>
            <param-name>config-location</param-name>
            <param-value>/WEB-INF/internalapi-cxf-servlet.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <!-- Webcert integration services -->
    <servlet>
        <servlet-name>services</servlet-name>
        <servlet-class>org.apache.cxf.transport.servlet.CXFServlet</servlet-class>
        <init-param>
            <param-name>config-location</param-name>
            <param-value>/WEB-INF/services-cxf-servlet.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <!-- Webcert testability services -->
    <servlet>
        <servlet-name>testability</servlet-name>
        <servlet-class>org.apache.cxf.transport.servlet.CXFServlet</servlet-class>
        <init-param>
            <param-name>config-location</param-name>
            <param-value>/WEB-INF/testability-cxf-servlet.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <!-- Webcert auth testability services -->
    <servlet>
        <servlet-name>authtestability</servlet-name>
        <servlet-class>org.apache.cxf.transport.servlet.CXFServlet</servlet-class>
        <init-param>
            <param-name>config-location</param-name>
            <param-value>/WEB-INF/authtestability-cxf-servlet.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <!-- External system integration services, legacy webcert 0.5/medcert -->
    <servlet>
        <servlet-name>uthoppintegrationapi</servlet-name>
        <servlet-class>org.apache.cxf.transport.servlet.CXFServlet</servlet-class>
        <init-param>
            <param-name>config-location</param-name>
            <param-value>/WEB-INF/uthopp-integration-cxf-servlet.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <!-- External system integration services webcert 2.0+ -->
    <servlet>
        <servlet-name>integrationapi</servlet-name>
        <servlet-class>org.apache.cxf.transport.servlet.CXFServlet</servlet-class>
        <init-param>
            <param-name>config-location</param-name>
            <param-value>/WEB-INF/integration-cxf-servlet.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <!-- Prometheus, metrics -->
    <servlet>
        <servlet-name>metrics</servlet-name>
        <servlet-class>io.prometheus.client.exporter.MetricsServlet</servlet-class>
    </servlet>

    <servlet-mapping>
        <servlet-name>web</servlet-name>
        <url-pattern>/web/*</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>api</servlet-name>
        <url-pattern>/api/*</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>moduleapi</servlet-name>
        <url-pattern>/moduleapi/*</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>internalapi</servlet-name>
        <url-pattern>/internalapi/*</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>services</servlet-name>
        <url-pattern>/services/*</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>testability</servlet-name>
        <url-pattern>/testability/*</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>authtestability</servlet-name>
        <url-pattern>/authtestability/*</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>uthoppintegrationapi</servlet-name>
        <url-pattern>/webcert/web/user/*</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>integrationapi</servlet-name>
        <url-pattern>/visa/*</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>integrationapi</servlet-name>
        <url-pattern>/v2/visa/*</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>metrics</servlet-name>
        <url-pattern>/metrics</url-pattern>
    </servlet-mapping>

    <!-- when running local tomcat9 via gretty in unminified mode, some json files (e.g app/app-deps.json) are served by tomcat and must
         have correct mimetype in order for the client to work correctly -->
    <mime-mapping>
        <extension>json</extension>
        <mime-type>application/json;charset=utf-8</mime-type>
    </mime-mapping>

    <filter>
        <filter-name>springSessionRepositoryFilter</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>springSessionRepositoryFilter</filter-name>
        <url-pattern>/*</url-pattern>
        <dispatcher>REQUEST</dispatcher>
        <dispatcher>ERROR</dispatcher>
    </filter-mapping>

    <!-- Update RequestContext for spring session -->
    <filter>
        <filter-name>requestContextHolderUpdateFilter</filter-name>
        <filter-class>se.inera.intyg.infra.security.filter.RequestContextHolderUpdateFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>requestContextHolderUpdateFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <filter>
        <filter-name>LogMDCFilter</filter-name>
        <filter-class>se.inera.intyg.infra.monitoring.logging.LogMDCServletFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>LogMDCFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <filter>
        <filter-name>defaultCharacterEncodingFilter</filter-name>
        <filter-class>se.inera.intyg.webcert.web.web.filter.DefaultCharacterEncodingFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>defaultCharacterEncodingFilter</filter-name>
        <url-pattern>/v2/visa/intyg/*</url-pattern>
    </filter-mapping>

    <filter>
        <filter-name>idpSelectionFilter</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>idpSelectionFilter</filter-name>
        <url-pattern>/webcert/web/user/*</url-pattern>
        <url-pattern>/web/maillink/*</url-pattern>
    </filter-mapping>

    <filter>
        <filter-name>elegRedirectFilter</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>elegRedirectFilter</filter-name>
        <url-pattern>/web/eleglogin</url-pattern>
    </filter-mapping>

    <filter>
        <filter-name>sessionTimeoutFilter</filter-name>
        <filter-class>se.inera.intyg.infra.security.filter.SessionTimeoutFilter</filter-class>
        <init-param>
            <param-name>skipRenewSessionUrls</param-name>
            <param-value>/moduleapi/stat,/api/session-auth-check/ping</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>sessionTimeoutFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- Filter for Spring Security -->
    <filter>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>springSecurityFilterChain</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- Principal updated filter detects changes to the User Principal and touches the session so Redis stores the changes. -->
    <filter>
        <filter-name>principalUpdatedFilter</filter-name>
        <filter-class>se.inera.intyg.infra.security.filter.PrincipalUpdatedFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>principalUpdatedFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <filter>
        <filter-name>unitSelectedAssuranceFilter</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
        <init-param><param-name>targetFilterLifecycle</param-name>
            <param-value>true</param-value>
        </init-param>
        <init-param><param-name>ignoredUrls</param-name>
            <param-value>/api/config,/api/anvandare,/api/anvandare/andraenhet,/api/jslog,/moduleapi/stat,/api/user</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>unitSelectedAssuranceFilter</filter-name>
        <url-pattern>/api/*</url-pattern>
        <url-pattern>/moduleapi/*</url-pattern>
    </filter-mapping>

    <!-- Filter to add http headers for security -->
    <filter>
        <filter-name>securityHeadersFilter</filter-name>
        <filter-class>se.inera.intyg.infra.security.filter.SecurityHeadersFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>securityHeadersFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <filter>
        <filter-name>internalApiFilter</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>internalApiFilter</filter-name>
        <url-pattern>/internalapi/*</url-pattern>
    </filter-mapping>

    <!-- Filter to check headers for launchId -->
    <filter>
        <filter-name>launchIdValidationFilter</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>launchIdValidationFilter</filter-name>
        <url-pattern>/api/*</url-pattern>
        <url-pattern>/moduleapi/*</url-pattern>
    </filter-mapping>

    <filter>
        <filter-name>allowCorsFilter</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>allowCorsFilter</filter-name>
        <url-pattern>/api/v1/session/invalidate</url-pattern>
    </filter-mapping>

    <welcome-file-list>
        <welcome-file>boot-app.jsp</welcome-file>

    </welcome-file-list>
    <error-page>
        <error-code>403</error-code>
        <location>/error.jsp?reason=denied</location>
    </error-page>
    <error-page>
        <error-code>404</error-code>
        <location>/error.jsp?reason=notfound</location>
    </error-page>
    <error-page>
        <error-code>500</error-code>
        <location>/error.jsp?reason=error</location>
    </error-page>

</web-app>
