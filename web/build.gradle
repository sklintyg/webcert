apply plugin: 'com.netflix.nebula.grunt'
apply plugin: 'org.gretty'
apply plugin: 'idea'
apply plugin: 'war'

def buildDirectory = project.layout.buildDirectory.get().asFile
def webappOutputDir = 'build/apps/'
def webappTestOutputDir = 'build/karma/'

ext {
    generatedJavaDir = file("${buildDirectory}/generatedSource/java")
    xsdBindings = file("src/main/resources/schemas/dss/bindings.xjb")
    xsdDir = file("src/main/resources/schemas/dss")
}

gretty {
    def instance = System.properties['instance'] ?: '0'
    def minified = System.properties['useMinifiedJavaScript'] ?: false
    def useHttpPort = 8020 + (instance as Integer)
    def useInternalHttpPort = 8120 + (instance as Integer)
    def applicationDir = "${rootProject.projectDir}/devops/dev"

    servletContainer = 'tomcat9'
    contextPath = '/'
    integrationTestTask = null
    scanInterval = 0
    debugPort = 8820 + (instance as Integer)
    portPropertiesFileName = "gretty_ports_${instance}.properties"
    fastReload = true
    inplaceMode = 'hard'
    debugSuspend = false
    serverConfigFile = "tomcat-gretty.xml"

    jvmArgs = ["-Dcatalina.base=${buildDirectory}/catalina.base",
               "-Dspring.profiles.active=dev,caching-enabled,wc-security-test,ia-stub",
               "-Dlogback.file=${applicationDir}/config/logback-dev.xml",
               "-Djava.awt.headless=true",
               "-Dfile.encoding=UTF-8",
               "-Dapplication.dir=${applicationDir}",
               "-Ddev.config.file=${applicationDir}/config/application-dev.properties",
               "-DuseMinifiedJavaScript=${minified}",
               "-Ddev.http.port=${useHttpPort}",
               "-Ddev.http.port.internal=${useInternalHttpPort}",
               "-Dxml.catalog.cacheEnabled=false"
    ]

    extraResourceBase webappOutputDir
}

node {
    version = "${nodeJsVersion}"
    npmVersion = "${npmVersion}"
    download = true
    distBaseUrl = 'https://nodejs.org/dist/'
    workDir = file("${rootProject.projectDir}/.gradle/nodejs")
    npmWorkDir = file("${rootProject.projectDir}/.gradle/npm")
}

grunt {
    colors = System.properties['gruntColors'] ? System.properties['gruntColors'].toBoolean() : true
}

idea {
    module {
        excludeDirs += file('node_modules')
        excludeDirs += file('src/main/webapp/bower_components')
        generatedSourceDirs.add(generatedJavaDir)
    }
}

/*idea {
    module {
        generatedSourceDirs.add(generatedJavaDir)
    }
}*/

configurations {
    // This is required to make the Schematron implementation pick up Saxon instead of Xalan.
    runtime { exclude group: 'xalan', module: 'xalan' }

    xsdgen

    testImplemetationClasspath.extendsFrom implementation
}

war {
    from("${buildDirectory}/apps")
    exclude '**/*.scss'
    exclude '**/*.spec.js'
    exclude '**/*.test.js'
}

test { exclude '**/*IT*' }

tasks.register('jsTests', NodeTask) {
    dependsOn npmInstall
    inputs.dir("$projectDir/src/main/resources")
    inputs.dir("$projectDir/src/main/webapp")
    inputs.files(fileTree(projectDir).include('*.js'))
    inputs.files(fileTree(projectDir).include('*.json'))
    inputs.files(configurations.testImplemetationClasspath)
    outputs.dir(webappTestOutputDir)

    script = file('node_modules/grunt-cli/bin/grunt')
    args = ['test', "--outputDir=${webappTestOutputDir}", '--run-coverage=' + (project.findProperty('codeCoverage') != null ? 'true' : '')]
}

tasks.register('jsInclude', NodeTask) {
    dependsOn npmInstall
    inputs.dir("$projectDir/src/main/resources")
    inputs.dir("$projectDir/src/main/webapp")
    inputs.files(fileTree(projectDir).include('*.js'))
    inputs.files(fileTree(projectDir).include('*.json'))
    inputs.files(configurations.testImplemetationClasspath)
    outputs.dir(webappOutputDir)

    script = file('node_modules/grunt-cli/bin/grunt')
    args = ['default', "--outputDir=${webappOutputDir}"]
}

tasks.register('unzipBuildTools', Copy) {
    into "${buildDirectory}/build-tools/"
    from {
        def intygJar = project.rootProject.buildscript.configurations.classpath.find { it.name.contains("se.inera.intyg.plugin.common") }
        zipTree(intygJar)
    }
}

tasks.register('jsCodeQuality', NodeTask) {
    dependsOn npmInstall, unzipBuildTools
    outputs.upToDateWhen { false }

    script = file('node_modules/grunt-cli/bin/grunt')
    args = ['lint']
}

tasks.register('xsd2Java') {
    doLast {
        mkdir generatedJavaDir.path
        ant.taskdef(
                name: 'xjc',
                classname: 'com.sun.tools.xjc.XJCTask',
                classpath: configurations.xsdgen.asPath
        )
        ant.xjc(
                destdir: generatedJavaDir.path,
                binding: xsdBindings,
                fork: true) {
            schema(dir: xsdDir.path, includes: "**/*.xsd")
            produces(dir: generatedJavaDir.path, includes: "**/*")
            jvmarg(value: '-Djavax.xml.accessExternalDTD=file')
        }
    }
}

checkstyleMain.dependsOn jsCodeQuality
compileJava.dependsOn(xsd2Java)
jsCodeQuality.onlyIf { project.hasProperty('codeQuality') }
sourceSets.main.java { srcDir generatedJavaDir }
test.dependsOn(jsTests)
war.dependsOn(jsInclude)
war.dependsOn createVersionPropertyFile

publishing {
    publications {
        mavenWeb(MavenPublication) {
            from components.web
        }
    }
}

if (project.hasProperty("codeQuality")) {
    license {
        exclude "**/dss/xsd/**/*.java"
    }
}

dependencies {
    implementation project(':fmb-integration')
    implementation project(':pp-integration')
    implementation project(':tak-integration')
    implementation project(':kundportalen-integration')
    implementation project(':notification-sender')
    implementation project(':fk-stub')
    implementation project(':notification-stub')
    implementation project(':intygstjanst-stub')
    implementation project(':mail-stub')

    implementation "org.jvnet.jaxb2_commons:jaxb2-basics-runtime:${jaxb2Version}"

    implementation "se.inera.intyg.infra:pu-integration:${infraVersion}"
    implementation "se.inera.intyg.infra:srs-integration:${infraVersion}"
    implementation "se.inera.intyg.infra:loggtjanst-stub:${infraVersion}"
    implementation "se.inera.intyg.infra:security-filter:${infraVersion}"
    implementation "se.inera.intyg.infra:security-siths:${infraVersion}"
    implementation "se.inera.intyg.infra:dynamiclink:${infraVersion}"
    implementation "se.inera.intyg.infra:grp-stub:${infraVersion}"
    implementation "se.inera.intyg.infra:postnummerservice-integration:${infraVersion}"
    implementation "se.inera.intyg.infra:xmldsig:${infraVersion}"
    implementation "se.inera.intyg.infra:monitoring:${infraVersion}"
    implementation "se.inera.intyg.infra:common-redis-cache-core:${infraVersion}"
    implementation "se.inera.intyg.infra:sjukfall-engine:${infraVersion}"
    implementation "se.inera.intyg.infra:ia-integration:${infraVersion}"
    implementation "se.inera.intyg.infra:intyginfo:${infraVersion}"
    implementation "se.inera.intyg.infra:integreradeenheter:${infraVersion}"
    implementation "se.inera.intyg.infra:testcertificate:${infraVersion}"
    implementation "se.inera.intyg.infra:certificate:${infraVersion}"
    implementation "se.inera.intyg.infra:message:${infraVersion}"

    implementation "se.inera.intyg.common:ts-bas:${commonVersion}"
    implementation "se.inera.intyg.common:ts-diabetes:${commonVersion}"
    implementation "se.inera.intyg.common:tstrk1062:${commonVersion}"
    implementation "se.inera.intyg.common:luse:${commonVersion}"
    implementation "se.inera.intyg.common:lisjp:${commonVersion}"
    implementation "se.inera.intyg.common:luae_na:${commonVersion}"
    implementation "se.inera.intyg.common:luae_fs:${commonVersion}"
    implementation "se.inera.intyg.common:db:${commonVersion}"
    implementation "se.inera.intyg.common:doi:${commonVersion}"
    implementation "se.inera.intyg.common:af00213:${commonVersion}"
    implementation "se.inera.intyg.common:af00251:${commonVersion}"
    implementation "se.inera.intyg.common:ag114:${commonVersion}"
    implementation "se.inera.intyg.common:ag7804:${commonVersion}"
    implementation "se.inera.intyg.common:tstrk1009:${commonVersion}"

    implementation "se.inera.intyg.infrastructure.directory.privatepractitioner.terms:intyg-infrastructure-directory-privatepractitioner-terms-schemas:${ppTermsSchemasVersion}"
    implementation "se.inera.intyg.clinicalprocess.healthcond.certificate:intyg-clinicalprocess-healthcond-certificate-schemas:${intygClinicalprocessSchemasVersion}"
    implementation "se.funktionstjanster.grp:funktionstjanster-grp-schemas:${funktionstjansterGrpSchemasVersion}"
    implementation "se.riv.itintegration.monitoring:itintegration-monitoring-schemas:${rivtaItintegrationMonitoringSchemasVersion}"

    implementation "se.inera.intyg.schemas:schemas-contract:${schemasContractVersion}"
    implementation "se.inera.intyg.clinicalprocess.healthcond.rehabilitation:intyg-clinicalprocess-healthcond-rehabilitation-schemas:${intygHealthcondRehabilitationSchemasVersion}"

    implementation "commons-codec:commons-codec"
    implementation "commons-io:commons-io:${commonsIoVersion}"
    implementation "org.jxls:jxls-jexcel:${jexcelVersion}"
    implementation "org.springframework:spring-web"
    implementation "org.springframework:spring-webmvc"
    implementation "org.springframework.session:spring-session-data-redis"
    implementation "org.springframework.security:spring-security-web"
    implementation "org.springframework.security:spring-security-taglibs"
    implementation "org.apache.lucene:lucene-analysis-common:${luceneAnalyzersCommonVersion}"
    implementation "org.opensaml:opensaml:${opensamlVersion}"
    implementation "org.opensaml:openws:${openWsVersion}"
    implementation "org.opensaml:xmltooling:${xmlToolingVersion}"
    implementation("io.swagger:swagger-jaxrs:${swaggerJaxrsVersion}") { exclude(module: "jsr311-api") }

    implementation "org.springframework.ws:spring-xml"

    implementation "net.javacrumbs.shedlock:shedlock-spring:${shedlockSpringVersion}"
    implementation "net.javacrumbs.shedlock:shedlock-provider-redis-spring:${shedlockSpringVersion}"

    implementation "javax.servlet:javax.servlet-api"

    implementation "io.jsonwebtoken:jjwt-impl:${jsonwebtokenVersion}"
    implementation "io.jsonwebtoken:jjwt-jackson:${jsonwebtokenVersion}"

    implementation "com.auth0:jwks-rsa:${jwksVersion}"
    implementation "com.google.auto.value:auto-value:${autovalueVersion}"

    implementation "org.apache.cxf:cxf-core:${cxfVersion}"
    implementation "org.apache.cxf:cxf-rt-frontend-jaxws:${cxfVersion}"
    implementation "org.apache.cxf:cxf-rt-frontend-jaxrs:${cxfVersion}"
    implementation "org.apache.cxf:cxf-rt-transports-http:${cxfVersion}"

    compileOnly "org.apache.geronimo.specs:geronimo-jms_1.1_spec:${geronimoJmsVersion}"

    testImplementation "se.inera.intyg.clinicalprocess.healthcond.certificate:intyg-clinicalprocess-healthcond-certificate-schemas:${intygClinicalprocessSchemasVersion}"
    testImplementation "org.hamcrest:hamcrest"
    testImplementation "org.hamcrest:hamcrest-library"
    testImplementation "org.assertj:assertj-core"
    testImplementation "org.skyscreamer:jsonassert"
    testImplementation "org.springframework:spring-test"
    testImplementation "org.xmlunit:xmlunit-legacy"
    testImplementation "org.awaitility:awaitility"
    testImplementation "org.springframework.boot:spring-boot-test"

    testImplementation "io.rest-assured:rest-assured"
    testImplementation "io.rest-assured:json-schema-validator"

    testImplementation "org.antlr:ST4:${stAntlr4Version}"
    annotationProcessor "com.google.auto.value:auto-value:${autovalueVersion}"

    gretty "org.eclipse.jetty:apache-jstl"
    gretty "se.inera.intyg.refdata:refdata:${refDataVersion}"

    xsdgen "org.glassfish.jaxb:jaxb-xjc"

    runtime "xerces:xercesImpl:2.12.2"
}
