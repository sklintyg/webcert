apply plugin: 'war'
apply plugin: 'org.gretty'
apply plugin: 'com.moowork.grunt'
apply plugin: 'idea'

def webappOutputDir = 'build/apps/'
def webappTestOutputDir = 'build/karma/'

idea {
    module {
        excludeDirs += file('node_modules')
        excludeDirs += file('src/main/webapp/bower_components')
    }
}

grunt {
    colors = System.properties['gruntColors'] ? System.properties['gruntColors'].toBoolean() : true
}

node {
    version = "${nodeJsVersion}"
    npmVersion = "${npmVersion}"
    download = true
    distBaseUrl = 'https://build-inera.nordicmedtest.se/node/'
    workDir = file("${rootProject.projectDir}/.gradle/nodejs")
    npmWorkDir = file("${rootProject.projectDir}/.gradle/npm")
}

task jsTests(type: NodeTask, dependsOn: npm_install) {
    inputs.dir("$projectDir/src/main/resources")
    inputs.dir("$projectDir/src/main/webapp")
    inputs.files(fileTree(projectDir).include('*.js'))
    inputs.files(fileTree(projectDir).include('*.json'))
    inputs.files(configurations.compile)
    outputs.dir(webappTestOutputDir)

    script = file('node_modules/grunt-cli/bin/grunt')
    args = ['test', "--outputDir=${webappTestOutputDir}", '--run-coverage=' + (project.findProperty('codeCoverage') != null ? 'true' : '')]
}

test.dependsOn(jsTests)

task jsInclude(type: NodeTask, dependsOn: npm_install) {
    inputs.dir("$projectDir/src/main/resources")
    inputs.dir("$projectDir/src/main/webapp")
    inputs.files(fileTree(projectDir).include('*.js'))
    inputs.files(fileTree(projectDir).include('*.json'))
    inputs.files(configurations.compile)
    outputs.dir(webappOutputDir)

    script = file('node_modules/grunt-cli/bin/grunt')
    args = ['default', "--outputDir=${webappOutputDir}"]
}

war.dependsOn(jsInclude)
war.dependsOn createVersionPropertyFile

task unzipBuildTools(type: Copy) {
    into "$buildDir/build-tools/"
    from {
        def intygJar = project.rootProject.buildscript.configurations.classpath.find { it.name.contains("se.inera.intyg.plugin.common") }
        zipTree(intygJar)
    }
}

task jsCodeQuality(type: NodeTask, dependsOn: [npm_install, unzipBuildTools]) {
    outputs.upToDateWhen { false }

    script = file('node_modules/grunt-cli/bin/grunt')
    args = ['lint']
}

checkstyleMain.dependsOn jsCodeQuality
jsCodeQuality.onlyIf { project.hasProperty('codeQuality') }

war {
    from("${buildDir}/apps")

    exclude '**/*.scss'
    exclude '**/*.spec.js'
    exclude '**/*.test.js'
}

test {
    exclude '**/*IT*'
}

task restAssuredTest(type: Test) {
    outputs.upToDateWhen { false }
    systemProperty "integration.tests.baseUrl", System.properties['baseUrl'] ?: "http://localhost:9088/"
    systemProperty "integration.tests.actuatorUrl", System.properties['actuatorUrl'] ?: "http://localhost:9088/"
    include '**/*IT*'
}

gretty {
    servletContainer = 'tomcat9'
    contextPath = '/'

    integrationTestTask = null
    scanInterval = 0
    httpEnabled = true
    httpsEnabled = true
    sslKeyStorePath = file("../devops/dev/certifikat/localhost.p12")
    sslKeyStorePassword = 'password'
    httpPort = 9088
    httpsPort = 19088
    debugPort = 5007
    fastReload = true
    inplaceMode = 'hard'
    debugSuspend = false

    def minified = System.properties['useMinifiedJavaScript'] ?: false

    jvmArgs = ["-Dcatalina.base=${buildDir}/catalina.base",
               "-Dspring.profiles.active=dev,caching-enabled,wc-security-test,ia-stub",
               "-Dconfig.folder=${projectDir}/../devops/dev",
               "-Dresources.folder=classpath:",
               "-Dcredentials.file=${projectDir}/webcert-credentials.properties",
               "-Dconfig.file=${projectDir}/webcert-dev.properties",
               "-Dlogback.file=classpath:logback-dev.xml",
               "-DuseMinifiedJavaScript=${minified}",
               "-Djetty.port=${httpPort}",
               "-Djetty.https.port=${httpsPort}"]

    extraResourceBase webappOutputDir
}

configurations {
    // This is required to make the Schematron implementation pick up Saxon instead of Xalan.
    runtime {
        exclude group: 'xalan', module: 'xalan'
    }
}

dependencies {
    compile project(':fmb-integration')
    compile project(':pp-integration')
    compile project(':tak-integration')
    compile project(':notification-sender')
    compile project(':fk-stub')
    compile project(':notification-stub')
    compile project(':intygstjanst-stub')
    compile project(':mail-stub')

    compile "se.inera.intyg.infra:pu-integration:${infraVersion}"
    compile "se.inera.intyg.infra:srs-integration:${infraVersion}"
    compile "se.inera.intyg.infra:loggtjanst-stub:${infraVersion}"
    compile "se.inera.intyg.infra:security-filter:${infraVersion}"
    compile "se.inera.intyg.infra:security-siths:${infraVersion}"
    compile "se.inera.intyg.infra:dynamiclink:${infraVersion}"
    compile "se.inera.intyg.infra:grp-stub:${infraVersion}"
    compile "se.inera.intyg.infra:nias-stub:${infraVersion}"
    compile "se.inera.intyg.infra:postnummerservice-integration:${infraVersion}"
    compile "se.inera.intyg.infra:xmldsig:${infraVersion}"
    compile "se.inera.intyg.infra:monitoring:${infraVersion}"
    compile "se.inera.intyg.infra:common-redis-cache-core:${infraVersion}"
    compile "se.inera.intyg.infra:sjukfall-engine:${infraVersion}"
    compile "se.inera.intyg.infra:ia-integration:${infraVersion}"
    compile "se.inera.intyg.infra:intyginfo:${infraVersion}"
    compile "se.inera.intyg.infra:integreradeenheter:${infraVersion}"
    compile "se.inera.intyg.infra:testcertificate:${infraVersion}"
    compile "se.inera.intyg.infra:message:${infraVersion}"

    compile "se.inera.intyg.common:ts-bas:${commonVersion}"
    compile "se.inera.intyg.common:ts-diabetes:${commonVersion}"
    compile "se.inera.intyg.common:tstrk1062:${commonVersion}"
    compile "se.inera.intyg.common:luse:${commonVersion}"
    compile "se.inera.intyg.common:lisjp:${commonVersion}"
    compile "se.inera.intyg.common:luae_na:${commonVersion}"
    compile "se.inera.intyg.common:luae_fs:${commonVersion}"
    compile "se.inera.intyg.common:db:${commonVersion}"
    compile "se.inera.intyg.common:doi:${commonVersion}"
    compile "se.inera.intyg.common:af00213:${commonVersion}"
    compile "se.inera.intyg.common:af00251:${commonVersion}"
    compile "se.inera.intyg.common:ag114:${commonVersion}"
    compile "se.inera.intyg.common:ag7804:${commonVersion}"
    compile "se.inera.intyg.common:tstrk1009:${commonVersion}"

    compile "se.inera.intyg.infrastructure.directory.privatepractitioner.terms:intyg-infrastructure-directory-privatepractitioner-terms-schemas:${ppTermsSchemasVersion}"
    compile "se.inera.intyg.clinicalprocess.healthcond.certificate:intyg-clinicalprocess-healthcond-certificate-schemas:${intygClinicalprocessSchemasVersion}"
    compile "se.funktionstjanster.grp:funktionstjanster-grp-schemas:${funktionstjansterGrpSchemasVersion}"
    compile "com.secmaker.netid.nias:netid-access-server-schemas:1.0.1"
    compile "se.riv.itintegration.monitoring:itintegration-monitoring-schemas:${rivtaItintegrationMonitoringSchemasVersion}"

    compile "se.inera.intyg.schemas:schemas-contract:${schemasContractVersion}"
    compile "se.inera.intyg.clinicalprocess.healthcond.rehabilitation:intyg-clinicalprocess-healthcond-rehabilitation-schemas:${intygHealthcondRehabilitationSchemasVersion}"

    compile "commons-codec:commons-codec"
    compile "commons-io:commons-io:${commonsIoVersion}"
    compile "org.jxls:jxls-jexcel:${jexcelVersion}"
    compile "org.springframework:spring-web"
    compile "org.springframework:spring-webmvc"
    compile "org.springframework.session:spring-session-data-redis"
    compile "org.springframework.security:spring-security-web"
    compile "org.springframework.security:spring-security-taglibs"
    compile "org.apache.lucene:lucene-analyzers-common:${luceneAnalyzersCommonVersion}"
    compile "org.opensaml:opensaml:${opensamlVersion}"
    compile "org.opensaml:openws:${openWsVersion}"
    compile "org.opensaml:xmltooling:${xmlToolingVersion}"
    compile("io.swagger:swagger-jaxrs:${swaggerJaxrsVersion}") {
        exclude(module: "jsr311-api")
    }

    compile "net.javacrumbs.shedlock:shedlock-spring:${shedlockSpringVersion}"
    compile "net.javacrumbs.shedlock:shedlock-provider-redis-spring:${shedlockSpringVersion}"

    compile "javax.servlet:javax.servlet-api"

    compile "io.jsonwebtoken:jjwt-impl:${jsonwebtokenVersion}"
    compile "io.jsonwebtoken:jjwt-jackson:${jsonwebtokenVersion}"

    compile "com.auth0:jwks-rsa:${jwksVersion}"
    compile "com.google.auto.value:auto-value:${autovalueVersion}"

    compile "org.apache.cxf:cxf-core:${cxfVersion}"
    compile "org.apache.cxf:cxf-rt-frontend-jaxws:${cxfVersion}"
    compile "org.apache.cxf:cxf-rt-frontend-jaxrs:${cxfVersion}"
    compile "org.apache.cxf:cxf-rt-transports-http:${cxfVersion}"

    compileOnly "org.apache.geronimo.specs:geronimo-jms_1.1_spec:${geronimoJmsVersion}"

    testCompile "se.inera.intyg.clinicalprocess.healthcond.certificate:intyg-clinicalprocess-healthcond-certificate-schemas:${intygClinicalprocessSchemasVersion}"
    testCompile "org.hamcrest:hamcrest"
    testCompile "org.hamcrest:hamcrest-library"
    testCompile "org.assertj:assertj-core"
    testCompile "org.skyscreamer:jsonassert"
    testCompile "org.springframework:spring-test"
    testCompile "org.xmlunit:xmlunit-legacy"
    testCompile "org.awaitility:awaitility"

    testCompile "io.rest-assured:rest-assured"
    testCompile "io.rest-assured:json-schema-validator"
    testCompile "com.sun.xml.bind:jaxb-osgi:2.3.2" // Can remove when rest-assured in BOM > version 4.0

    testCompile "org.antlr:ST4:${stAntlr4Version}"
    annotationProcessor "com.google.auto.value:auto-value:${autovalueVersion}"

    gretty "org.eclipse.jetty:apache-jstl:${apacheJstlVersion}"
    gretty "se.inera.intyg.refdata:refdata:${refDataVersion}"
}
