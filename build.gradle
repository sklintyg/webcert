plugins {
    id "org.gretty" version "4.1.5" apply false
    id "io.spring.dependency-management" version "1.1.6" apply false
    id 'org.sonarqube' version '5.1.0.4882'
    id "org.owasp.dependencycheck" version "10.0.4"
    id 'test-report-aggregation'
    id 'jacoco'
}

ext {
    commonVersion = System.properties['commonVersion'] ?: '4.0.0-SNAPSHOT'
    infraVersion = System.properties['infraVersion'] ?: '4.0.0-SNAPSHOT'
    refDataVersion = '20'

    funktionstjansterGrpSchemasVersion = "2.0.0.2"
    intygClinicalprocessSchemasVersion = "1.0.24.2"
    intygHealthcondRehabilitationSchemasVersion = "1.1.3.2"
    intygTransportstyrelsenSchemasVersion = "1.0.5.3"
    ppSchemasVersion = "1.0.5.2"
    ppTermsSchemasVersion = "1.0.5.2"
    rivtaClinicalprocessSchemasVersion = "4.0.5.3"
    rivtaGetPersonsPersonSchemasVersion = "3.1.1.2"
    rivtaInsuranceprocessSchemasVersion = "3.1.0.5.2"
    rivtaItintegrationMonitoringSchemasVersion = "1.0.0.5.2"
    schemasContractVersion = "2.1.8.2"
    srsSchemasVersion = "0.0.16.2"

    camelVersion = "4.8.0"
    commonsIoVersion = "2.17.0"
    cxfVersion = "4.0.5"
    geronimoJmsVersion = "1.1.1"
    guavaVersion = "33.3.1-jre"
    jakartaJwsApiVersion = "3.0.0"
    jaxb2Version = "3.0.0"
    jexcelVersion = "1.0.9"
    jodaTimeVersion = "2.13.0"
    luceneAnalyzersCommonVersion = "9.12.0"
    phSchematronVersion = "7.1.3"
    picocliVersion = "4.7.6"
    shedlockSpringVersion = "5.16.0"
    swaggerJaxrsVersion = "1.6.14"
    vavrVersion = "0.10.5"
    xercesVersion = "2.12.2"

    springbootMavenBomVersion = "3.3.4"

    nvdMirror = 'https://vulnz-nvd-mirror-devtest.intyg.nordicmedtest.se'
}

allprojects {
    apply plugin: "io.spring.dependency-management"
    apply plugin: 'java-library'
    apply plugin: 'idea'
    apply plugin: 'jacoco'
    apply plugin: 'war'

    group = 'se.inera.intyg.webcert'
    version = System.properties['buildVersion'] ?: '0-SNAPSHOT'
    sourceCompatibility = 21
    targetCompatibility = 21

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springbootMavenBomVersion}"
        }
    }

    compileJava {
        options.compilerArgs.add("-parameters")
    }

    dependencies {
        implementation "ch.qos.logback:logback-classic"
        implementation "jakarta.annotation:jakarta.annotation-api"
        implementation "jakarta.jws:jakarta.jws-api:${jakartaJwsApiVersion}"
        implementation "jakarta.xml.ws:jakarta.xml.ws-api"

        runtimeOnly "com.sun.xml.messaging.saaj:saaj-impl"

        testImplementation "junit:junit"
        testImplementation "org.glassfish.jaxb:jaxb-runtime"
        testImplementation "org.junit.jupiter:junit-jupiter-api"
        testImplementation "org.junit.jupiter:junit-jupiter-params"
        testImplementation "org.mockito:mockito-junit-jupiter"
        testImplementation "org.mockito:mockito-core"

        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
        testRuntimeOnly "org.junit.vintage:junit-vintage-engine"
    }

    compileJava.options.encoding = 'UTF-8'
    compileJava.dependsOn processResources
    war.duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    test { useJUnitPlatform() }

    repositories {
        mavenLocal()
        maven { url "https://nexus.drift.inera.se/repository/it-public/" }
        maven { url 'https://build.shibboleth.net/nexus/content/repositories/releases/' }
        mavenCentral {
            content {
                excludeGroupByRegex "se\\.inera.*"
            }
        }
    }

    idea {
        module {
            downloadJavadoc = true
        }
    }
}

jacocoTestReport {
    dependsOn test

    reports {
        xml.required = true
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "**/testability/**",
                    "**/integrationtest/**"
            ])
        }))
    }
}

sonar {
    properties {
        property "sonar.projectKey", "intyg-webcert"
        property "sonar.projectName", "intyg-webcert"
        property "sonar.dependencyCheck.jsonReportPath", "${layout.buildDirectory.get()}/reports/dependency-check-report.json" as String
        property "sonar.dependencyCheck.htmlReportPath", "${layout.buildDirectory.get()}/reports/dependency-check-report.html" as String
    }
}

dependencyCheck {
    formats = List.of("HTML", "JSON")
    nvd.setDatafeedUrl(nvdMirror)
    analyzers.setAssemblyEnabled(false)
}

reporting {
    subprojects.collect {subproject -> subproject.name }.each { subprojectName ->
        dependencies { testReportAggregation project(":${subprojectName}") }
    }
}
