import se.inera.intyg.IntygPluginKt

import java.nio.file.Files
import java.nio.file.Paths

plugins {
    id "se.inera.intyg.plugin.common" version "3.2.10-SNAPSHOT" apply false
    id "io.spring.dependency-management" version "1.1.3" apply false
    id "com.netflix.nebula.node" version "3.0.0" apply false
    id "org.gretty" version "3.1.1" apply false
    id 'test-report-aggregation'
}

ext {
    commonVersion = System.properties['commonVersion'] ?: '3.20.0-SNAPSHOT'
    infraVersion = System.properties['infraVersion'] ?: '3.20.0-SNAPSHOT'
    refDataVersion = System.properties['refDataVersion'] ?: '1.0-SNAPSHOT'

    funktionstjansterGrpSchemasVersion = "1.0.6.1"
    intygClinicalprocessSchemasVersion = "1.0.24.1"
    intygHealthcondRehabilitationSchemasVersion = "1.1.3.1"
    intygTransportstyrelsenSchemasVersion = "1.0.5.1"
    ppSchemasVersion = "1.0.5.1"
    ppTermsSchemasVersion = "1.0.5.1"
    rivtaClinicalprocessSchemasVersion = "4.0.5.2"
    rivtaGetPersonsPersonSchemasVersion = "3.1.1.1"
    rivtaInsuranceprocessSchemasVersion = "3.1.0.5.1"
    rivtaItintegrationMonitoringSchemasVersion = "1.0.0.5.1"
    schemasContractVersion = "2.1.8.1"
    srsSchemasVersion = "0.0.16.1"

    autovalueVersion = "1.10.4"
    camelVersion = "3.21.2"
    commonsIoVersion = "2.14.0"
    cxfVersion = "3.6.2"
    embeddedRedisVersion = "0.7.2"
    geronimoJmsVersion = "1.1.1"
    guavaVersion = "32.1.3-jre"
    jadiraUserTypeVersion = "6.0.1.GA"
    jakartaJwsApiVersion = "2.1.0" // version 3.0.0 -> warning: "class file for javax.jws.soap.SOAPBinding$ParameterStyle not found"
    jaxb2Version = "0.13.1"
    jexcelVersion = "1.0.9"
    jsonwebtokenVersion = "0.11.5"
    jwksVersion = "0.22.0"
    luceneAnalyzersCommonVersion = "9.8.0"
    openWsVersion = "1.5.4"
    opensamlVersion = "2.6.4"
    phSchematronVersion = "5.6.5"
    picocliVersion = "4.7.5"
    shedlockSpringVersion = "4.46.0"
    springSecuritySaml2CoreVersion = "1.0.3.RELEASE"
    stAntlr4Version = "4.3.4"
    swaggerJaxrsVersion = "1.6.12"
    vavrVersion = "0.10.4"
    xercesVersion = "2.12.2"
    xmlToolingVersion = "1.4.4"

    nodeJsVersion = "12.22.12"
    npmVersion = "6.14.16"

    springbootMavenBomVersion = "2.7.17"
}

allprojects {
    apply plugin: 'se.inera.intyg.plugin.common'
    apply plugin: "io.spring.dependency-management"
    apply plugin: 'java-library'
    apply plugin: 'idea'

    group = 'se.inera.intyg.webcert'
    version = System.properties['buildVersion'] ?: '0.0-SNAPSHOT'
    sourceCompatibility = 11
    targetCompatibility = 11

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springbootMavenBomVersion}"
        }
    }

    dependencies {
        implementation "ch.qos.logback:logback-classic"
        implementation "jakarta.annotation:jakarta.annotation-api"
        implementation "jakarta.jws:jakarta.jws-api:${jakartaJwsApiVersion}"
        implementation "jakarta.xml.ws:jakarta.xml.ws-api"

        runtimeOnly "com.sun.xml.messaging.saaj:saaj-impl"

        testImplementation "junit:junit"
        testImplementation "org.glassfish.jaxb:jaxb-runtime"
        testImplementation "org.junit.jupiter:junit-jupiter-api"
        testImplementation "org.junit.jupiter:junit-jupiter-params"
        testImplementation "org.mockito:mockito-junit-jupiter"
        testImplementation "org.mockito:mockito-core"
        testImplementation "se.inera.intyg.refdata:refdata:${refDataVersion}"

        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
        testRuntimeOnly "org.junit.vintage:junit-vintage-engine"
    }

    tasks.register('createVersionPropertyFile', VersionPropertyFileTask)

    if (project.hasProperty('codeQuality')) {
        tasks.register('spotbugsIncludesAndExcludes') {
            dependsOn ":unzipBuildTools"
            spotbugsMain {
                includeFilter.set(rootProject.layout.buildDirectory.file("/build-tools/spotbugs/spotbugsIncludeFilter.xml").get().asFile)
                excludeFilter.set(rootProject.layout.buildDirectory.file("/build-tools/spotbugs/spotbugsExcludeFilter.xml").get().asFile)
            }
        }

        spotbugsMain.dependsOn('spotbugsIncludesAndExcludes')
        spotbugsMain.dependsOn(':unzipBuildTools')
        spotbugsTest.enabled(false)
        dependencies { spotbugsSlf4j "org.slf4j:slf4j-simple" }
    }

    compileJava.options.encoding = 'UTF-8'
    compileJava.dependsOn processResources
    checkstyleMain.dependsOn createVersionPropertyFile
    compileTestJava.dependsOn createVersionPropertyFile
    test { useJUnitPlatform() }

    repositories {
        mavenLocal()
        maven { url "https://nexus.drift.inera.se/repository/it-public/" }
        mavenCentral {
            content {
                // this repository contains everything BUT artifacts with group starting with "se.inera"
                excludeGroupByRegex "se\\.inera.*"
            }
        }
    }

    idea {
        module {
            downloadJavadoc = true
        }
    }
}

subprojects.collect {subproject -> subproject.name }.each { subprojectName ->
    dependencies { testReportAggregation project(":${subprojectName}") }
}

tasks.register('tagRelease', TagReleaseTask)

tasks.register('unzipBuildTools', Copy) {
    into "${rootProject.layout.buildDirectory.get().asFile}/build-tools/"
    from { zipTree(project.rootProject.buildscript.configurations.classpath.find { it.name.contains("se.inera.intyg.plugin.common") })
            .matching { include "/spotbugs/**", "/git_hooks/**" }
    }
}

tasks.register("applyGitHooks", Copy) {
    dependsOn("unzipBuildTools")
    def repository = IntygPluginKt.findGitRepository(project.rootProject.projectDir)
    def commitMsg = rootProject.layout.buildDirectory.file("/build-tools/git_hooks/commit-msg").get().asFile
    def preCommit = rootProject.layout.buildDirectory.file("/build-tools/git_hooks/pre-commit").get().asFile
    def toDir = Paths.get(repository.directory.path, "hooks")

    if (!Files.exists(toDir)) {
        Files.createDirectory(toDir)
    }

    IntygPluginKt.copyFile(commitMsg, toDir)
    IntygPluginKt.copyFile(preCommit, toDir)
}

applyGitHooks.dependsOn(unzipBuildTools)
